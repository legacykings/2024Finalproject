from tkinter import W
#from typing import Self
import pygame
import math
from player import player
from fireball import fireball
from enemy import enemy
from npc import npc

pygame.init()
font = pygame.font.Font('freesansbold.ttf', 20)
screen = pygame.display.set_mode((1000,1000)) #screen is a rectangle, not square!
pygame.display.set_caption("game states with mouse menu")
clock = pygame.time.Clock()
gameover = False

p1 = player()
ball = fireball()
e1 = enemy()
npc = npc()
ticker = 0
bounce = True 

LEFT = 0
RIGHT = 1
UP = 2
DOWN = 3
SPACE = 4
W = 5
keys = [False, False, False, False, False, False]

#ticker += 1


mapNum = 1

map =[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
      [2,3,3,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,3,3,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,3,3,2,2,2,2,3,3,3,2,3,3,3,3,1,2,2,3,2],
      [2,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,2],
      [2,3,3,3,3,3,3,1,3,3,3,2,3,3,3,3,3,3,3,2],
      [2,3,2,3,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,3,2,3,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,3,2,1,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,5],
      [2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,2,2,3,5],
      [2,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,2],
      [2,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,2],
      [2,3,3,3,3,2,2,3,3,3,3,3,3,2,3,3,3,3,3,2],
      [2,3,3,1,3,2,3,3,3,3,3,3,3,3,3,3,2,1,3,2],
      [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2],
      [2,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,3,3,3,3,3,2,2,3,3,3,3,1,3,3,3,3,3,3,2],
      [2,3,2,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,1,2,1,3,3,3,3,3,3,2,1,3,3,3,3,3,3,3,2],
      [2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2]]

map2 =[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
      [2,3,3,3,3,2,2,3,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,3,3,3,3,3,3,3,2,3,1,3,3,3,3,3,3,3,3,2],
      [2,3,3,3,2,2,2,3,3,3,2,3,3,3,3,1,2,2,3,2],
      [2,3,3,3,3,3,1,3,3,3,3,1,3,3,3,3,3,3,3,2],
      [2,3,3,3,3,3,3,1,3,3,3,2,3,3,3,3,3,3,3,2],
      [2,3,2,3,3,3,2,3,3,3,3,2,3,3,3,3,3,3,3,2],
      [2,3,2,3,3,3,3,2,3,3,3,3,3,2,3,3,3,2,3,2],
      [5,3,2,1,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,2],
      [5,3,3,3,3,3,2,3,3,3,3,3,3,3,2,1,2,2,3,2],
      [2,3,3,3,3,2,3,3,3,3,3,3,2,3,3,3,3,3,3,2],
      [2,3,3,3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,2],
      [2,2,3,3,3,2,2,3,3,3,3,3,3,2,3,3,3,3,3,2],
      [2,3,3,2,3,2,3,3,3,3,3,3,3,3,3,3,2,1,3,2],
      [2,1,3,3,3,3,2,3,3,3,3,3,1,3,3,1,3,2,3,2],
      [2,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,3,3,3,3,3,2,2,3,3,3,3,1,3,1,3,3,3,3,2],
      [2,3,2,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2],
      [2,1,2,1,3,3,3,3,3,3,2,1,3,3,3,3,3,3,3,2],
      [2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2]]

brick = pygame.image.load('brick.png')
netherite = pygame.image.load('netherite.png')
grass = pygame.image.load('grass1.png')
#grass2 = pygame.image.load('grass2.png')
#grass3 = pygame.image.load('grass3.png')
grass4 = pygame.image.load('grass6.jpg')
#mouse input
xpos = 0
ypos = 0
mousePos = (xpos, ypos)
mouseDown = False


#game state variable
state = 1 #1 is menu, 2 is playing, 3 is credits
button1 = False

#add more buttons here!
running = True
quitGame = False

def dist(x1, y1, x2, y2):
    return math.sqrt((x1-x2)**2 + (y1-y2)**2)
#ticker += 1
#if ticker%20 == 0:
    #if bounce == True:
        #bounce == False
    #else:
        #bounce = True

while running: #game loop###########################################################
    
    #input section=========================================
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        #keeps track of mouse position
        if event.type == pygame.MOUSEMOTION:
            mousePos = event.pos
        #keeps track of mouse button
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouseDown = True
        if event.type == pygame.MOUSEBUTTONUP:
            mouseDown = False
        #if p1.health <= 0:
            #quitGame = True
        
        #keyboard input (more needed for actual game)
        if event.type == pygame.KEYDOWN: 
            if event.key == pygame.K_q:
                quitGame = True
            if event.key == pygame.K_LEFT:
                keys[LEFT] = True
                
            if event.key == pygame.K_RIGHT:
                keys[RIGHT] = True
                
            if event.key == pygame.K_UP:
                keys[UP] = True
                
            if event.key == pygame.K_DOWN:
                keys[DOWN] = True
                
            if event.key == pygame.K_SPACE:
                keys[SPACE] = True
            if event.key == pygame.K_w:
                keys[W] = True
                
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_q:
                quitGame = False
            if event.key == pygame.K_LEFT:
                keys[LEFT] = False

            if event.key == pygame.K_RIGHT:
                keys[RIGHT] = False
                
            if event.key == pygame.K_UP:
                keys[UP] = False
                
            if event.key == pygame.K_DOWN:
                keys[DOWN] = False
                
            if event.key == pygame.K_SPACE:
                keys[SPACE] = False
            
            if event.key == pygame.K_w:
                keys[W] = False
                
                
    #physics/update section=========================================
    #print(mousePos)#uncomment for testing
    
    #state 1: menu state!------------------------------
    if state == 1 and mousePos[0]>100 and mousePos[0]<300 and mousePos[1]>400 and mousePos[1]<550:
        button1 = True
    else:
        button1 = False
        
    if state == 1 and mousePos[0]>400 and mousePos[0]<600 and mousePos[1]>400 and mousePos[1]<550:
        button2 = True
    else:
        button2 = False
        
    if state == 1 and mousePos[0]>700 and mousePos[0]<900 and mousePos[1]>400 and mousePos[1]<550:
        button3 = True
    else:
        button3 = False
            
    if state == 1 and button1 == True and mouseDown == True:
        state = 2
    if state == 1 and button2 == True and mouseDown == True:
        state = 3
    if state == 1 and button3 == True and mouseDown == True:
        state = 4
    #state 2: playing state!---------------------------
    if state == 2 and quitGame == True: #pressing quit takes you back to menu
        state = 1
    if state == 3 and quitGame == True: #pressing quit takes you back to menu
        state = 1
    if state == 4 and quitGame == True: #pressing quit takes you back to menu
        state = 1
    #regular game physics would go here
    #p1.move(keys, map)
    #ball.move()
    #e1.move(map, ticker,p1.xpos, p1.ypos)
    #npc.move(map, ticker)
    
    #if keys[SPACE] == True:
        #ball.shoot(p1.xpos, p1.ypos, p1.direction)
    
    #render section=========================================
    
    #menu state-------------------------------
    if state == 1:
        screen.fill((230,100,100))# Clear the screen pink
        if button1 == False:
            pygame.draw.rect(screen, (100, 230, 100), (100, 400, 200, 150))
        else:
            pygame.draw.rect(screen, (200, 250, 200), (100, 400, 200, 150))
        if button2 == False:
            pygame.draw.rect(screen, (100, 230, 100), (400, 400, 200, 150))
        else:
            pygame.draw.rect(screen, (200, 250, 200), (400, 400, 200, 150))
        if button3 == False:
            pygame.draw.rect(screen, (100, 230, 100), (700, 400, 200, 150))
        else:
            pygame.draw.rect(screen, (200, 250, 200), (700, 400, 200, 150))
            
    
    #game state-------------------------------
    if state == 2:

        screen.fill((0,0,0))
        if mapNum == 1:
            for i in range(20):
                for j in range(20):
                    if map[i][j] == 1:
                        screen.blit(netherite, (j * 50, i * 50), (0, 0, 50, 50))
                    if map[i][j] == 2:
                        screen.blit(brick, (j * 50, i * 50), (0, 0, 50, 50))
                    if map[i][j] == 3:
                         if bounce == True:
                           screen.blit(grass4, (j * 50, i * 50), (0, 0, 50, 50))
                         else:
                            screen.blit(grass, (j * 50, i * 50), (0, 0, 50, 50))
        elif mapNum == 2:
            for i in range(20):
                for j in range(20):
                    if map2[i][j] == 1:
                        screen.blit(netherite, (j * 50, i * 50), (0, 0, 50, 50))
                    if map2[i][j] == 2:
                        screen.blit(brick, (j * 50, i * 50), (0, 0, 50, 50))
                    if map2[i][j] == 3:
                        if bounce == True:
                          screen.blit(grass, (j * 50, i * 50), (0, 0, 50, 50))
                        else:
                           screen.blit(grass4, (j * 50, i * 50), (0, 0, 50, 50))
                    if map2[i][j] == 5:
                        pygame.draw.rect(screen, (0,0,0), (j*50, i*50, 50, 50))
                    
        pygame.draw.rect(screen, (255, 255, 255), (750, 5, 200, 30))
        pygame.draw.rect(screen, (150, 0, 0), (750, 5, p1.health, 30))
        pygame.draw.rect(screen, (0, 0, 0), (750, 5, 200, 30), 3)         
                    
        p1.draw(screen)
        e1.draw(screen)
        npc.draw(screen, ticker)
    
    if ball.isAlive == True:
        ball.draw(screen)
    if mapNum == 1:    
        p1.move(keys, map)
    elif mapNum == 2:
        p1.move(keys, map2)
    ball.move()
    
    if mapNum == 1:
        e1.move(map, ticker,p1.xpos, p1.ypos)
        e1.die(ball.xpos, ball.ypos)
        p1.ouch(e1.xpos, e1.ypos)
        npc.move(map, ticker)
        
        #if keys[W] == True and dist(p1.xpos, p1.ypos, npc.xpos, npc.ypos)<20:
            #npc.talk(ticker)
            
    elif mapNum == 2:
        e1.move(map, ticker,p1.xpos, p1.ypos)
        e1.die(ball.xpos, ball.ypos)
        p1.ouch(e1.xpos, e1.ypos)
        npc.move(map, ticker)
        
        #if keys[W] == True and dist(p1.xpos, p1.ypos, npc.xpos, npc.ypos)<20:
            #npc.talk(ticker)
            
    if mapNum == 1:
        if map[int((p1.ypos) / 50)][int( (p1.xpos) / 50)] == 5:
            mapNum = 2
            p1.xpos = 50
    elif mapNum == 2:
        if map2[int((p1.ypos) / 50)][int( (p1.xpos) / 50)] == 5:
            mapNum = 1
            p1.xpos = 950
    
    if keys[SPACE] == True:
        ball.shoot(p1.xpos, p1.ypos, p1.direction)
        
    if state == 3:
        screen.fill((252, 3, 244))
    if state == 4:
        screen.fill((3, 252, 252))# Clear the screen green
        #more game stuff would be drawn here
    ticker += 1
    if ticker%20 == 0:
        if bounce == True:
            bounce == False
        else:
            bounce = True
       
    pygame.display.flip()# Update the display

#end of game loop###################################################################
pygame.quit()
